export const projects = [
  {
    id: 0,
    title: "Props Drilling in React",
    // img:"https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
    description: "Don't Let Your Components Drown in Data Debt.",
    p1: <><strong>Imagine this</strong>: you're building a React app, everything's going smoothly, components are reusable, code is clean. Then, the dreaded data sharing issue pops up. You need user information, say the theme preference, to trickle down from the mighty App component to a tiny button component buried deep within the UI. Boom! You start passing data down, prop by prop, like a bucket brigade battling a data-fueled fire. This, my friends, is prop drilling, and it's a recipe for component hell.</>,
    fH1: "Why is prop drilling bad?",
    reas: ["Spaghetti code: As your app grows, props become entangled, creating a complex and hard-to-debug mess.",
        "Maintenance nightmare: Adding new features or modifying existing ones becomes a game of prop Jenga, where one wrong move can topple the entire structure.",
        "Component reusability suffers: Components become tightly coupled to specific data, limiting their reusability in other parts of your app."
        ],
    fh2: <><strong>Enter the hero: useContext</strong></>,
    des1:"React's useContext hook offers a lifeline, allowing components to access shared data without explicit prop drilling. Think of it as a magical backpack accessible to anyone, regardless of their position in the component hierarchy.",
    fh3: "How does it work?",
    reas1: [<><strong>Create a context</strong>: Define a context object using React.createContext(). This object will hold your shared data.</>,
        <><strong>Wrap components</strong>: Wrap the components that need access to the data in a Provider component. This component provides the context value to its children.</>,
        <><strong>Access the data</strong>: Inside any child component, use the useContext hook to access the context object and its data.</>,
        ],
    fh4: "Example: Theming with useContext",
    des2: "Let's say you want to share a theme preference (light or dark) throughout your app. Here's how you can do it with useContext:",

  },
  {
    id: 1,
    title: "useParams vs redux",
    description: "Lorem ipsum dolor sit amet consectetur adipisicing.",
    technologies: ["react", "node", "express", "mongo"],
    image: "",
    liveHref: "",
    gitHref: "",
    iconGit: "fa-brands fa-github",
    iconLive: "fa-solid fa-arrow-up-right-from-square",
    typePro: ["Front", "all"],
  },
  {
    id: 2,
    title: "project 3",
    description: "Lorem ipsum dolor sit amet consectetur adipisicing elit.",
    technologies: ["react", "node", "express", "mongo"],
    image: "",
    liveHref: "",
    gitHref: "",
    iconGit: "fa-brands fa-github",
    iconLive: "fa-solid fa-arrow-up-right-from-square",
    typePro: ["Back", "all"],
  },
  {
    id: 3,
    title: "project 4",
    description: "Lorem ipsum dolor sit amet consectetur adipisicing elit.",
    technologies: ["react", "node", "express", "mongo"],
    image: "",
    liveHref: "",
    gitHref: "",
    iconGit: "fa-brands fa-github",
    iconLive: "fa-solid fa-arrow-up-right-from-square",
    typePro: ["Cyber", "all"],
  },
];
